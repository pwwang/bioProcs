from biopipen.core.config import config
from biopipen.core.proc import Proc
from biopipen.core.testing import get_pipeline
from biopipen.ns.stats import Mediation as Mediation_


class PrepareData(Proc):
    """Prepare data for mediation analysis.

    See also https://ademos.people.uic.edu/Chapter14.html
    """
    input = "seed:var"
    input_data = [123]
    output = "outfile:file:data.txt, casefile:file:cases.txt"
    lang = config.lang.rscript
    script = """
        set.seed({{in.seed}}) #Standardizes the numbers generated by rnorm; see Chapter 5
        N <- 100 #Number of participants; graduate students
        X <- rnorm(N, 175, 7) #IV; hours since dawn
        M <- 0.7*X + rnorm(N, 0, 5) #Suspected mediator; coffee consumption
        Y <- 0.4*M + rnorm(N, 0, 5) #DV; wakefulness
        Meddata <- data.frame(X, M, Y)
        write.table(Meddata, file="{{out.outfile}}", sep="\t", row.names=FALSE)

        df <- data.frame(
            Case = c("Case1"),
            M = c("M"),
            X = c("X"),
            Y = c("Y"),
            Model_M = c("lm"),
            Model_Y = c("lm")
        )
        write.table(df, file="{{out.casefile}}", sep="\t", row.names=FALSE)
    """


class Mediation(Mediation_):
    requires = PrepareData
    input_data = lambda ch: ch.outfile.to_list()
    envs = {
        "cases": {
            "Case1": {
                "M": "M",
                "X": "X",
                "Y": "Y",
                "Model_M": "lm",
                "Model_Y": "lm",
            }
        }
    }


class MediationWithFmlfile(Mediation_):
    requires = PrepareData


def pipeline():
    return (
        get_pipeline(__file__)
        .set_starts(PrepareData)
    )


def testing(pipen):
    ...


if __name__ == "__main__":
    pipen = pipeline()
    assert pipen.run()
    testing(pipen)
