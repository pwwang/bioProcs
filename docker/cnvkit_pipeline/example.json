{
    "PIPELINE_OPTIONS": {
        "cache": {
            "default": null,
            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
            "hidden": true,
            "placeholder": "true",
            "type": "auto",
            "value": null
        },
        "desc": {
            "changed": false,
            "default": "The CNVkit pipeline",
            "desc": "The description of the pipeline, shows in the log and report.",
            "type": "str",
            "value": "The CNVkit pipeline"
        },
        "dirsig": {
            "default": null,
            "desc": "How deep we should go to check directory signature",
            "hidden": true,
            "placeholder": "1",
            "type": "int",
            "value": null
        },
        "error_strategy": {
            "choices": [
                "ignore",
                "retry",
                "halk"
            ],
            "choices_desc": [
                "Ignore the error and continue to run next jobs",
                "Retry the job",
                "Halt the pipeline"
            ],
            "default": "ignore",
            "desc": "What to do when a job fails",
            "hidden": true,
            "type": "choice",
            "value": "ignore"
        },
        "forks": {
            "changed": false,
            "default": null,
            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
            "placeholder": "1",
            "type": "int",
            "value": null
        },
        "loglevel": {
            "choices": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
            ],
            "default": "info",
            "desc": "Logging level. This affects the log level of the main plugin.",
            "hidden": true,
            "type": "choice",
            "value": "info"
        },
        "name": {
            "changed": false,
            "default": null,
            "desc": "The name of the pipeline. It will affect the names of working directory and the result directory",
            "placeholder": "Example",
            "readonly": true,
            "type": "str",
            "value": "Example"
        },
        "num_retries": {
            "default": null,
            "desc": "Number of retries when a job fails. ",
            "hidden": true,
            "placeholder": "3",
            "type": "int",
            "value": null
        },
        "outdir": {
            "changed": false,
            "default": null,
            "desc": "The output directory of your pipeline",
            "placeholder": "./<name>-output",
            "type": "str",
            "value": null
        },
        "plugin_opts": {
            "default": {},
            "desc": "The plugin options of your pipeline",
            "value": {
                "<plugin_name>_<plugin_opt_name>": {
                    "changed": false,
                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                    "order": 999,
                    "type": "str",
                    "value": [
                        [
                            "",
                            ""
                        ]
                    ]
                },
                "report_no_collapse_pgs": {
                    "changed": false,
                    "default": false,
                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                    "type": "bool",
                    "value": true
                }
            }
        },
        "scheduler": {
            "default": null,
            "desc": "The scheduler to use",
            "hidden": true,
            "placeholder": "local",
            "value": null
        },
        "scheduler_opts": {
            "default": {},
            "desc": "The scheduler options",
            "value": {
                "<option_name>": {
                    "changed": false,
                    "desc": "The value of the option",
                    "order": 999,
                    "type": "auto",
                    "value": [
                        [
                            "",
                            ""
                        ]
                    ]
                }
            }
        },
        "submission_batch": {
            "default": null,
            "desc": "Number of jobs to submit at a time",
            "hidden": true,
            "placeholder": "8",
            "type": "int",
            "value": null
        }
    },
    "PROCESSES": {},
    "PROCGROUPS": {
        "CNVkitPipeline": {
            "ARGUMENTS": {
                "access_excludes": {
                    "changed": false,
                    "default": [],
                    "desc": "File(s) with regions to be excluded for `cnvkit.py access`.",
                    "list": true,
                    "type": "list",
                    "value": []
                },
                "accfile": {
                    "changed": false,
                    "default": null,
                    "desc": "The accessible genomic regions.<br />\nIf not given, use `cnvkit.py access` to generate one.",
                    "value": null
                },
                "annotate": {
                    "changed": true,
                    "default": "",
                    "desc": "Use gene models from this file to assign names to the target regions. Format: UCSC `refFlat.txt` or `ensFlat.txt` file (preferred), or BED, interval list, GFF, or similar.",
                    "value": "/example/example-data/refFlat.txt"
                },
                "baitfile": {
                    "changed": false,
                    "default": null,
                    "desc": "Potentially targeted genomic regions.<br />\nE.g. all possible exons for the reference genome.<br />\nThis is optional when `method` is `wgs`.",
                    "value": null
                },
                "case": {
                    "changed": false,
                    "default": null,
                    "desc": "The group name of samples in `metacols.group` to call CNVs for.<br />\nIf not specified, use all samples. In such a case, `control` must not be specified, as we are using a flat reference.",
                    "value": null
                },
                "cnvkit": {
                    "changed": false,
                    "default": "cnvkit.py",
                    "desc": "the path to the cnvkit.py executable, defaults to `config.exe.cnvkit` from `./.biopipen.toml` or `~/.biopipen.toml`.",
                    "value": "cnvkit.py"
                },
                "control": {
                    "changed": false,
                    "default": null,
                    "desc": "The group name of samples in `metacols.group` to use as reference if not specified, use a flat reference.",
                    "value": null
                },
                "convert": {
                    "changed": false,
                    "default": "convert",
                    "desc": "Linux `convert` command to convert pdf to png So that they can be embedded in the HTML report.",
                    "value": "convert"
                },
                "drop_low_coverage": {
                    "changed": false,
                    "default": false,
                    "desc": "Drop very-low-coverage bins before segmentation to avoid false-positive deletions in poor-quality tumor samples. Used by `CNVkitSegment` and `CNVkitCall`",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "guessbaits": {
                    "changed": true,
                    "default": false,
                    "desc": "Guess the bait file from the bam files, either guided or unguided.<br />\nIf False, `baitfile` is used. Otherwise, if `baitfile` is given, use it (guided), otherwise use `accfile` (unguided).<br />\nThe bam files with `metacols.guess_baits` column set to `True`, `TRUE`, `true`, `1`, `Yes`, `YES`, or `yes` will be used to guess the bait file.",
                    "flag": true,
                    "type": "bool",
                    "value": true
                },
                "guessbaits_guided": {
                    "changed": false,
                    "default": false,
                    "desc": "Whether to use guided mode for guessing baits using `baitfile`, otherwise unguided, using the `accfile`.",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "heatmap_cnr": {
                    "changed": false,
                    "default": false,
                    "desc": "Whether to generate a heatmap of the `.cnr` files (bin-level signals). This is allowed to set to `False`, it will take longer to run.",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "male_reference": {
                    "changed": false,
                    "default": false,
                    "desc": "Use or assume a male reference (i.e. female samples will have +1 log-CNR of chrX; otherwise male samples would have -1 chrX).<br />\nUsed by `CNVkitReference`, `CNVkitCall`, `CNVkitHeatmapCns` and `CNVkitHeatmapCnr`.",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "metacols": {
                    "default": {
                        "bam": "Bam",
                        "group": "Group",
                        "guess_baits": "GuessBaits",
                        "purity": "Purity",
                        "sex": "Sex",
                        "snpvcf": "SnpVcf",
                        "vcf_normal_id": "VcfNormalId",
                        "vcf_sample_id": "VcfSampleId"
                    },
                    "desc": "The column names for each type of information in metafile.",
                    "ns": true,
                    "order": "-98",
                    "type": "ns",
                    "value": {
                        "bam": {
                            "changed": false,
                            "default": "Bam",
                            "desc": "The column name in the metafile that indicates the path to the BAM file",
                            "value": "Bam"
                        },
                        "group": {
                            "changed": false,
                            "default": "Group",
                            "desc": "The column name in the metafile that indicates the sample group",
                            "value": "Group"
                        },
                        "guess_baits": {
                            "changed": false,
                            "default": "GuessBaits",
                            "desc": "The column name in the metafile that indicates whether to guess the bait file from the bam files",
                            "value": "GuessBaits"
                        },
                        "purity": {
                            "changed": false,
                            "default": "Purity",
                            "desc": "The column name in the metafile that indicates the sample purity",
                            "value": "Purity"
                        },
                        "sex": {
                            "changed": false,
                            "default": "Sex",
                            "desc": "flagin the metafile that indicates the sample sex",
                            "value": "Sex"
                        },
                        "snpvcf": {
                            "changed": false,
                            "default": "SnpVcf",
                            "desc": "The column name in the metafile that indicates the path to the SNP VCFflag",
                            "value": "SnpVcf"
                        },
                        "vcf_normal_id": {
                            "changed": false,
                            "default": "VcfNormalId",
                            "desc": "olumn name in the metafile that indicates the normal sample ID in the VCF file",
                            "value": "VcfNormalId"
                        },
                        "vcf_sample_id": {
                            "changed": false,
                            "default": "VcfSampleId",
                            "desc": "column name in the metafile that indicates the sample ID in the VCF file",
                            "value": "VcfSampleId"
                        }
                    }
                },
                "metafile": {
                    "changed": true,
                    "default": null,
                    "desc": "A tab-separated file.<br />\n* Sample: Unique IDs of the samples. Required.<br />\n* `<bam>`: The path to the bam file, better using absolute path.<br />\n* `<group>`: The type of the sample, defining the tumor/normal samples.<br />\n* `<sex>`: Guess each sample from coverage of X and Y chromosomes if not given.<br />\n* `<purity>`: Estimated tumor cell fraction, a.k.a. purity or cellularity.<br />\n* `<snpvcf>`: file name containing variants for segmentation by allele frequencies.<br />\n* `<vcf_sample_id>`: Sample ID in the VCF file.<br />\n* `<vcf_normal_id>`: Normal sample ID in the VCF file.<br />\n* `<guess_baits>`: Whether use this bam file to guess the baits",
                    "order": "-99",
                    "value": "/example/example-data/metadata.txt"
                },
                "method": {
                    "changed": false,
                    "choice": true,
                    "choices": [
                        "hybrid",
                        "amplicon",
                        "wgs"
                    ],
                    "choices_desc": [
                        "hybridization capture",
                        "targeted amplicon sequencing",
                        "whole genome sequencing"
                    ],
                    "default": "hybrid",
                    "desc": "Sequencing protocol, determines whether and how to use antitarget bins.\n- `hybrid`: hybridization capture\n- `amplicon`: targeted amplicon sequencing\n- `wgs`: whole genome sequencing\n",
                    "type": "choice",
                    "value": "hybrid"
                },
                "min_variant_depth": {
                    "changed": false,
                    "default": 20,
                    "desc": "Minimum read depth for a SNV to be displayed in the b-allele frequency plot.<br />\nUsed by `CNVkitSegment` and `CNVkitCall`",
                    "type": "int",
                    "value": 20
                },
                "ncores": {
                    "changed": false,
                    "default": 1,
                    "desc": "Default number of cores to use for all processes with `envs.ncores`, defaults to `config.misc.ncores`",
                    "value": 1
                },
                "no_edge": {
                    "changed": false,
                    "default": false,
                    "desc": "Skip edge-effect correction for `cnvkit.py reference/fix`.",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "no_gc": {
                    "changed": false,
                    "default": false,
                    "desc": "Skip GC correction for `cnvkit.py reference/fix`.",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "no_rmask": {
                    "changed": false,
                    "default": false,
                    "desc": "Skip RepeatMasker correction for `cnvkit.py reference/fix`.<br />\nno_* options are used by `CNVkitReference` and `CNVkitFix`",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "reffa": {
                    "changed": true,
                    "default": "",
                    "desc": "the reference genome (e.g. hg19.fa).<br />\nUsed by `CNVkitAccess`, `CNVkitAutobin` and `CNVkitReference`",
                    "value": "/example/example-data/genome.fasta"
                },
                "rscript": {
                    "changed": false,
                    "default": "Rscript",
                    "desc": "Path to the Rscript excecutable to use for running R code.<br />\nRequires `DNAcopy` to be installed in R, defaults to `config.lang.rscript`",
                    "value": "Rscript"
                },
                "samtools": {
                    "changed": false,
                    "default": "samtools",
                    "desc": "Path to samtools, used for guessing bait file.",
                    "value": "samtools"
                },
                "short_names": {
                    "changed": false,
                    "default": true,
                    "desc": "Reduce multi-accession bait labels to be short and consistent.",
                    "flag": true,
                    "type": "bool",
                    "value": true
                },
                "zygosity_freq": {
                    "changed": false,
                    "default": 0.25,
                    "desc": "Ignore VCF's genotypes (GT field) and instead infer zygosity from allele frequencies.<br />\nUsed by `CNVkitSegment` and `CNVkitCall`",
                    "type": "float",
                    "value": 0.25
                }
            },
            "PROCESSES": {
                "CNVkitAccess": {
                    "desc": "# Calculate the sequence-accessible coordinates in chromosomes from the given reference genome using `cnvkit.py access`\n\n\n\n**When group argument `accfile` is provided, the arguments won't\nwork. The `accfile` will just be passed by to the next\nprocess.**",
                    "is_start": true,
                    "order": 1,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cnvkit": "cnvkit.py",
                                "min_gap_size": 5000,
                                "ref": ""
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to `cnvkit.py`.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "min_gap_size": {
                                    "default": 5000,
                                    "desc": "Minimum gap size between accessible sequence regions",
                                    "type": "int",
                                    "value": 5000
                                },
                                "ref": {
                                    "default": "",
                                    "desc": "The reference genome fasta file.<br />\nDefaults group argument `reffa`.",
                                    "pgarg": "reffa",
                                    "value": ""
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "in": {
                            "desc": "The input data for the process",
                            "required": true,
                            "type": "ns",
                            "value": {
                                "excfiles": {
                                    "action": "append",
                                    "desc": "Additional regions to exclude, in BED format",
                                    "itype": "files",
                                    "nargs": "+",
                                    "type": "list",
                                    "value": null
                                }
                            }
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitAutobin": {
                    "desc": "# Quickly estimate read counts or depths in a BAM file to estimate reasonable on- and (if relevant) off-target bin sizes.\n\nUsing `cnvkit.py autobin`.\n\nIf multiple BAMs are given, use the BAM with median file size.",
                    "is_start": false,
                    "order": 3,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "annotate": "",
                                "antitarget_max_size": 500000,
                                "antitarget_min_size": 500,
                                "bp_per_bin": 100000,
                                "cnvkit": "cnvkit.py",
                                "method": "hybrid",
                                "ref": "",
                                "short_names": true,
                                "target_max_size": 20000,
                                "target_min_size": 20
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "annotate": {
                                    "default": "",
                                    "desc": "Use gene models from this file to assign names to the target regions. Format: UCSC refFlat.txt or ensFlat.txt file (preferred), or BED, interval list, GFF, or similar..<br />\nDefaults to group argument `annotate`.",
                                    "pgarg": true,
                                    "value": ""
                                },
                                "antitarget_max_size": {
                                    "default": 500000,
                                    "desc": "Maximum size of antitarget bins.",
                                    "type": "int",
                                    "value": 500000
                                },
                                "antitarget_min_size": {
                                    "default": 500,
                                    "desc": "Minimum size of antitarget bins.",
                                    "type": "int",
                                    "value": 500
                                },
                                "bp_per_bin": {
                                    "default": 100000,
                                    "desc": "Desired average number of sequencing read bases mapped to each bin.",
                                    "type": "int",
                                    "value": 100000
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to `cnvkit.py`.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "method": {
                                    "choice": true,
                                    "choices": [
                                        "hybrid",
                                        "amplicon",
                                        "wgs"
                                    ],
                                    "choices_desc": [
                                        "Hybridization capture",
                                        "Targeted amplicon sequencing",
                                        "Whole genome sequencing"
                                    ],
                                    "default": "hybrid",
                                    "desc": "Sequencing protocol. Determines whether and how to use antitarget bins..\n- `hybrid`: Hybridization capture\n- `amplicon`: Targeted amplicon sequencing\n- `wgs`: Whole genome sequencing\n",
                                    "pgarg": true,
                                    "type": "choice",
                                    "value": "hybrid"
                                },
                                "ref": {
                                    "default": "",
                                    "desc": "The reference genome fasta file.<br />\nDefaults to group argument `reffa`.",
                                    "pgarg": "reffa",
                                    "value": ""
                                },
                                "short_names": {
                                    "default": true,
                                    "desc": "Reduce multi-accession bait labels to be short and consistent..<br />\nDefaults to group argument `short_names`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "target_max_size": {
                                    "default": 20000,
                                    "desc": "Maximum size of target bins.",
                                    "type": "int",
                                    "value": 20000
                                },
                                "target_min_size": {
                                    "default": 20,
                                    "desc": "Minimum size of target bins.",
                                    "type": "int",
                                    "value": 20
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitCall": {
                    "desc": "# Run cnvkit.py call\n\n",
                    "is_start": false,
                    "order": 9,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "center": "median",
                                "center_at": null,
                                "cnvkit": "cnvkit.py",
                                "drop_low_coverage": false,
                                "filter": null,
                                "male_reference": false,
                                "method": "threshold",
                                "min_variant_depth": 20,
                                "ploidy": 2,
                                "thresholds": "-1.1,-0.25,0.2,0.7",
                                "zygosity_freq": 0.25
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "center": {
                                    "default": "median",
                                    "desc": "Re-center the log2 ratio values using this estimator of the center or average value.",
                                    "value": "median"
                                },
                                "center_at": {
                                    "default": null,
                                    "desc": "Subtract a constant number from all log2 ratios.<br />\nFor \"manual\" re-centering, in case the --center option gives unsatisfactory results.)",
                                    "type": "float",
                                    "value": null
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "drop_low_coverage": {
                                    "default": false,
                                    "desc": "Drop very-low-coverage bins before segmentation to avoid false-positive deletions in poor-quality tumor samples..<br />\nDefaults to group argument `drop_low_coverage`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "filter": {
                                    "default": null,
                                    "desc": "Merge segments flagged by the specified filter(s) with the adjacent segment(s).",
                                    "value": null
                                },
                                "male_reference": {
                                    "default": false,
                                    "desc": "Assume inputs were normalized to a male reference.<br />\n(i.e. female samples will have +1 log-CNR of chrX; otherwise male samples would have -1 chrX)..<br />\nDefaults to group argument `male_reference`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "method": {
                                    "choice": true,
                                    "choices": [
                                        "threshold",
                                        "clonal",
                                        "none"
                                    ],
                                    "choices_desc": [
                                        "Using hard thresholds for calling each integer copy number.",
                                        "Rescaling and rounding.",
                                        "Do not add a “cn” column or allele copy numbers."
                                    ],
                                    "default": "threshold",
                                    "desc": "Calling method (threshold, clonal or none).\n- `threshold`: Using hard thresholds for calling each integer copy number.<br />\nUse `thresholds` to set a list of threshold log2 values for each copy number state\n- `clonal`: Rescaling and rounding.<br />\nFor a given known tumor cell fraction and normal ploidy, then simple rounding to the nearest integer copy number\n- `none`: Do not add a “cn” column or allele copy numbers.<br />\nBut still performs rescaling, re-centering, and extracting b-allele frequencies from a VCF (if requested).\n",
                                    "type": "choice",
                                    "value": "threshold"
                                },
                                "min_variant_depth": {
                                    "default": 20,
                                    "desc": "Minimum read depth for a SNV to be displayed in the b-allele frequency plot..<br />\nDefaults to group argument `min_variant_depth`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 20
                                },
                                "ploidy": {
                                    "default": 2,
                                    "desc": "Ploidy of the sample cells.",
                                    "type": "float",
                                    "value": 2
                                },
                                "thresholds": {
                                    "default": "-1.1,-0.25,0.2,0.7",
                                    "desc": "Hard thresholds for calling each integer copy number, separated by commas.",
                                    "value": "-1.1,-0.25,0.2,0.7"
                                },
                                "zygosity_freq": {
                                    "default": 0.25,
                                    "desc": "Ignore VCF's genotypes (GT field) and instead infer zygosity from allele frequencies..<br />\nDefaults to group argument `zygosity_freq`.",
                                    "pgarg": true,
                                    "type": "float",
                                    "value": 0.25
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitCoverageAnittarget": {
                    "desc": "# Build the coverage for the anti-target regions\n\n",
                    "is_start": false,
                    "order": 4,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cnvkit": "cnvkit.py",
                                "count": false,
                                "min_mapq": 0,
                                "ncores": 1,
                                "ref": ""
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "count": {
                                    "default": false,
                                    "desc": "Get read depths by counting read midpoints within each bin. (An alternative algorithm).",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "min_mapq": {
                                    "default": 0,
                                    "desc": "Minimum mapping quality to include a read.",
                                    "type": "int",
                                    "value": 0
                                },
                                "ncores": {
                                    "default": 1,
                                    "desc": "Number of subprocesses to calculate coverage in parallel.<br />\nDefaults to group argument `ncores`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "ref": {
                                    "default": "",
                                    "desc": "The reference genome fasta file.<br />\nDefaults to group argument `reffa`.",
                                    "pgarg": "reffa",
                                    "value": ""
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitCoverageTarget": {
                    "desc": "# Build the coverage for the target regions\n\n",
                    "is_start": false,
                    "order": 5,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cnvkit": "cnvkit.py",
                                "count": false,
                                "min_mapq": 0,
                                "ncores": 1,
                                "ref": ""
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "count": {
                                    "default": false,
                                    "desc": "Get read depths by counting read midpoints within each bin. (An alternative algorithm).",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "min_mapq": {
                                    "default": 0,
                                    "desc": "Minimum mapping quality to include a read.",
                                    "type": "int",
                                    "value": 0
                                },
                                "ncores": {
                                    "default": 1,
                                    "desc": "Number of subprocesses to calculate coverage in parallel.<br />\nDefaults to group argument `ncores`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "ref": {
                                    "default": "",
                                    "desc": "The reference genome fasta file.<br />\nDefaults to group argument `reffa`.",
                                    "pgarg": "reffa",
                                    "value": ""
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitDiagram": {
                    "desc": "# Run cnvkit.py diagram\n\n",
                    "is_start": false,
                    "order": 10,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cases": {},
                                "cnvkit": "cnvkit.py",
                                "convert": "convert",
                                "convert_args": {
                                    "alpha": "remove",
                                    "background": "white",
                                    "density": 150,
                                    "quality": 90
                                },
                                "male_reference": false,
                                "min_probes": 3,
                                "no_shift_xy": false,
                                "threshold": 0.5,
                                "title": null
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cases": {
                                    "default": {},
                                    "desc": "The cases with keys as names and values as different configs, including `threshold`, `min_probes`, `male_reference`, `no_shift_xy` and `title`",
                                    "type": "json",
                                    "value": {}
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "convert": {
                                    "default": "convert",
                                    "desc": "Path to `convert` to convert pdf to png file.<br />\nDefaults to group argument `convert`.",
                                    "pgarg": true,
                                    "value": "convert"
                                },
                                "convert_args": {
                                    "default": {
                                        "alpha": "remove",
                                        "background": "white",
                                        "density": 150,
                                        "quality": 90
                                    },
                                    "desc": "The arguments for `convert`",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "desc": "See `convert -help` and also:<br />\nhttps://linux.die.net/man/1/convert",
                                            "order": 999,
                                            "value": null
                                        },
                                        "alpha": {
                                            "default": "remove",
                                            "desc": "Activate, deactivate, reset, or set the alpha channel",
                                            "value": "remove"
                                        },
                                        "background": {
                                            "default": "white",
                                            "desc": "Background color",
                                            "value": "white"
                                        },
                                        "density": {
                                            "default": 150,
                                            "desc": "Horizontal and vertical density of the image",
                                            "type": "int",
                                            "value": 150
                                        },
                                        "quality": {
                                            "default": 90,
                                            "desc": "JPEG/MIFF/PNG compression level",
                                            "type": "int",
                                            "value": 90
                                        }
                                    }
                                },
                                "male_reference": {
                                    "default": false,
                                    "desc": "Assume inputs were normalized to a male reference (i.e. female samples will have +1 log-CNR of chrX; otherwise male samples would have -1 chrX)..<br />\nDefaults to group argument `male_reference`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "min_probes": {
                                    "default": 3,
                                    "desc": "Minimum number of covered probes to label a gene.",
                                    "type": "int",
                                    "value": 3
                                },
                                "no_shift_xy": {
                                    "default": false,
                                    "desc": "Don't adjust the X and Y chromosomes according to sample sex.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "threshold": {
                                    "default": 0.5,
                                    "desc": "Copy number change threshold to label genes.",
                                    "type": "float",
                                    "value": 0.5
                                },
                                "title": {
                                    "default": null,
                                    "desc": "Plot title. Sample ID if not provided.",
                                    "value": null
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitFix": {
                    "desc": "# Run cnvkit.py fix\n\n",
                    "is_start": false,
                    "order": 7,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cluster": false,
                                "cnvkit": "cnvkit.py",
                                "no_edge": false,
                                "no_gc": false,
                                "no_rmask": false
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cluster": {
                                    "default": false,
                                    "desc": "Compare and use cluster-specific values present in the reference profile.<br />\n(requires `envs.cluster=True` for `CNVkitReference`).",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "no_edge": {
                                    "default": false,
                                    "desc": "Skip edge-effect correction..<br />\nDefaults to group argument `no_edge`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "no_gc": {
                                    "default": false,
                                    "desc": "Skip GC correction..<br />\nDefaults to group argument `no_gc`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "no_rmask": {
                                    "default": false,
                                    "desc": "Skip RepeatMasker correction..<br />\nDefaults to group argument `no_rmask`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitGuessBaits": {
                    "desc": "# Guess the bait intervals from the bam files\n\nIt runs scripts/guess_baits.py from the cnvkit repo.",
                    "is_start": false,
                    "order": 2,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cnvkit": "cnvkit.py",
                                "guided": false,
                                "min_depth": 5,
                                "min_gap": 25,
                                "min_length": 50,
                                "ncores": 1,
                                "ref": "",
                                "samtools": "samtools"
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "guided": {
                                    "default": false,
                                    "desc": "`in.atfile` is a potential target file when `True`, otherwise it is an access file..<br />\nDefaults to group argument `guessbaits_guided`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "min_depth": {
                                    "default": 5,
                                    "desc": "Minimum sequencing read depth to accept as captured. For guided only.",
                                    "type": "int",
                                    "value": 5
                                },
                                "min_gap": {
                                    "default": 25,
                                    "desc": "Merge regions separated by gaps smaller than this.",
                                    "type": "int",
                                    "value": 25
                                },
                                "min_length": {
                                    "default": 50,
                                    "desc": "Minimum region length to accept as captured.<br />\n`min_gap` and `min_length` are for unguided only.",
                                    "type": "int",
                                    "value": 50
                                },
                                "ncores": {
                                    "default": 1,
                                    "desc": "Number of subprocesses to segment in parallel `0` to use the maximum number of available CPUs..<br />\nDefaults to group argument `ncores`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "ref": {
                                    "default": "",
                                    "desc": "Path to a FASTA file containing the reference genome..<br />\nDefaults to group argument `reffa`.",
                                    "pgarg": "reffa",
                                    "value": ""
                                },
                                "samtools": {
                                    "default": "samtools",
                                    "desc": "Path to samtools executable.<br />\nDefaults to group argument `samtools`.",
                                    "pgarg": true,
                                    "value": "samtools"
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitHeatmapCns": {
                    "desc": "# Generate heatmaps of segment-level signals of multiple samples\n\n",
                    "is_start": false,
                    "order": 11,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "by_bin": false,
                                "cases": {},
                                "chromosome": false,
                                "cnvkit": "cnvkit.py",
                                "convert": "convert",
                                "convert_args": {
                                    "alpha": "remove",
                                    "background": "white",
                                    "density": 150,
                                    "quality": 90
                                },
                                "desaturate": false,
                                "male_reference": false,
                                "no_shift_xy": false,
                                "order": null
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "by_bin": {
                                    "default": false,
                                    "desc": "Plot data x-coordinates by bin indices instead of genomic coordinates. All bins will be shown with equal width, no blank regions will be shown, and x-axis values indicate bin number (within chromosome) instead of genomic position.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "cases": {
                                    "default": {},
                                    "desc": "The cases for different plots with keys as case names and values to overwrite the default args given by `envs.<args>`, including `convert_args`, `by_bin`, `chromosome`, `desaturate`, `male_reference`, and, `no_shift_xy`.<br />\nBy default, an `all` case will be created with default arguments if no case specified",
                                    "type": "json",
                                    "value": {}
                                },
                                "chromosome": {
                                    "default": false,
                                    "desc": "Chromosome (e.g. 'chr1') or chromosomal range (e.g. 'chr1:2333000-2444000') to display.",
                                    "value": false
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "convert": {
                                    "default": "convert",
                                    "desc": "Path to `convert` to convert pdf to png file.<br />\nDefaults to group argument `convert`.",
                                    "pgarg": true,
                                    "value": "convert"
                                },
                                "convert_args": {
                                    "default": {
                                        "alpha": "remove",
                                        "background": "white",
                                        "density": 150,
                                        "quality": 90
                                    },
                                    "desc": "The arguments for `convert`",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "desc": "See `convert -help` and also:<br />\nhttps://linux.die.net/man/1/convert",
                                            "order": 999,
                                            "value": null
                                        },
                                        "alpha": {
                                            "default": "remove",
                                            "desc": "Activate, deactivate, reset, or set the alpha channel",
                                            "value": "remove"
                                        },
                                        "background": {
                                            "default": "white",
                                            "desc": "Background color",
                                            "value": "white"
                                        },
                                        "density": {
                                            "default": 150,
                                            "desc": "Horizontal and vertical density of the image",
                                            "type": "int",
                                            "value": 150
                                        },
                                        "quality": {
                                            "default": 90,
                                            "desc": "JPEG/MIFF/PNG compression level",
                                            "type": "int",
                                            "value": 90
                                        }
                                    }
                                },
                                "desaturate": {
                                    "default": false,
                                    "desc": "Tweak color saturation to focus on significant changes.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "male_reference": {
                                    "default": false,
                                    "desc": "Assume inputs were normalized to a male reference. (i.e. female samples will have +1 log-CNR of chrX; otherwise male samples would have -1 chrX)..<br />\nDefaults to group argument `male_reference`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "no_shift_xy": {
                                    "default": false,
                                    "desc": "Don't adjust the X and Y chromosomes according to sample sex.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "order": {
                                    "default": null,
                                    "desc": "A file with sample names in the desired order.",
                                    "value": null
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitReference": {
                    "desc": "# Run cnvkit reference\n\nTo genearte a reference file from normal samples, provide the cnn coverage\nfiles from the normal samples. To generate a flat reference file, provide\nthe target/antitarget file.",
                    "is_start": false,
                    "order": 6,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cluster": false,
                                "cnvkit": "cnvkit.py",
                                "male_reference": false,
                                "min_cluster_size": 4,
                                "no_edge": false,
                                "no_gc": false,
                                "no_rmask": false,
                                "ref": ""
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cluster": {
                                    "default": false,
                                    "desc": "Calculate and store summary stats for clustered subsets of the normal samples with similar coverage profiles.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "male_reference": {
                                    "default": false,
                                    "desc": "Create a male reference: shift female samples chrX log-coverage by -1, so the reference chrX average is -1. Otherwise, shift male samples chrX by +1, so the reference chrX average is 0..<br />\nDefaults to group argument `male_reference`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "min_cluster_size": {
                                    "default": 4,
                                    "desc": "Minimum cluster size to keep in reference profiles.",
                                    "type": "int",
                                    "value": 4
                                },
                                "no_edge": {
                                    "default": false,
                                    "desc": "Skip edge-effect correction..<br />\nDefaults to group argument `no_edge`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "no_gc": {
                                    "default": false,
                                    "desc": "Skip GC correction..<br />\nDefaults to group argument `no_gc`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "no_rmask": {
                                    "default": false,
                                    "desc": "Skip RepeatMasker correction..<br />\nDefaults to group argument `no_rmask`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "ref": {
                                    "default": "",
                                    "desc": "The reference genome fasta file.<br />\nDefaults to group argument `reffa`.",
                                    "pgarg": "reffa",
                                    "value": ""
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitScatter": {
                    "desc": "# Run cnvkit.py scatter\n\n",
                    "is_start": false,
                    "order": 12,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "antitarget_marker": false,
                                "by_bin": false,
                                "cases": {},
                                "chromosome": null,
                                "cnvkit": "cnvkit.py",
                                "convert": "convert",
                                "convert_args": {
                                    "alpha": "remove",
                                    "background": "white",
                                    "density": 150,
                                    "quality": 90
                                },
                                "gene": null,
                                "min_variant_depth": 20,
                                "segment_color": null,
                                "title": null,
                                "trend": false,
                                "width": 1000000,
                                "y_max": null,
                                "y_min": null,
                                "zygosity_freq": 0.25
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "antitarget_marker": {
                                    "default": false,
                                    "desc": "Plot antitargets using this symbol when plotting in a selected chromosomal region (-g/--gene or -c/--chromosome).",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "by_bin": {
                                    "default": false,
                                    "desc": "Plot data x-coordinates by bin indices instead of genomic coordinates. All bins will be shown with equal width, no blank regions will be shown, and x-axis values indicate bin number (within chromosome) instead of genomic position.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "cases": {
                                    "default": {},
                                    "desc": "The cases for different plots with keys as case names and values to overwrite the default args given by `envs.<args>`, including  `convert_args`, `by_bin`, `chromosome`, `gene`, `width` `antitarget_marker`, `segment_color`, `trend`, `y_max`, `y_min`, `min_variant_depth`, `zygosity_freq` and `title.<br />\nBy default, an `all` case will be created with default arguments if no case specified",
                                    "type": "json",
                                    "value": {}
                                },
                                "chromosome": {
                                    "default": null,
                                    "desc": "Chromosome or chromosomal range, e.g. 'chr1' or 'chr1:2333000-2444000', to display.<br />\nIf a range is given, all targeted genes in this range will be shown, unless -g/--gene is also given.",
                                    "value": null
                                },
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "convert": {
                                    "default": "convert",
                                    "desc": "Path to `convert` to convert pdf to png file.<br />\nDefaults to group argument `convert`.",
                                    "pgarg": true,
                                    "value": "convert"
                                },
                                "convert_args": {
                                    "default": {
                                        "alpha": "remove",
                                        "background": "white",
                                        "density": 150,
                                        "quality": 90
                                    },
                                    "desc": "The arguments for `convert`",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "desc": "See `convert -help` and also:<br />\nhttps://linux.die.net/man/1/convert",
                                            "order": 999,
                                            "value": null
                                        },
                                        "alpha": {
                                            "default": "remove",
                                            "desc": "Activate, deactivate, reset, or set the alpha channel",
                                            "value": "remove"
                                        },
                                        "background": {
                                            "default": "white",
                                            "desc": "Background color",
                                            "value": "white"
                                        },
                                        "density": {
                                            "default": 150,
                                            "desc": "Horizontal and vertical density of the image",
                                            "type": "int",
                                            "value": 150
                                        },
                                        "quality": {
                                            "default": 90,
                                            "desc": "JPEG/MIFF/PNG compression level",
                                            "type": "int",
                                            "value": 90
                                        }
                                    }
                                },
                                "gene": {
                                    "default": null,
                                    "desc": "Name of gene or genes (comma-separated) to display.",
                                    "value": null
                                },
                                "min_variant_depth": {
                                    "default": 20,
                                    "desc": "Minimum read depth for a SNV to be displayed in the b-allele frequency plot..<br />\nDefaults to group argument `min_variant_depth`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 20
                                },
                                "segment_color": {
                                    "default": null,
                                    "desc": "Plot segment lines in this color. Value can be any string accepted by matplotlib, e.g. 'red' or '#CC0000'.",
                                    "value": null
                                },
                                "title": {
                                    "default": null,
                                    "desc": "Plot title. Sample ID if not provided.",
                                    "value": null
                                },
                                "trend": {
                                    "default": false,
                                    "desc": "Draw a smoothed local trendline on the scatter plot.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "width": {
                                    "default": 1000000,
                                    "desc": "Width of margin to show around the selected gene(s) (-g/--gene) or small chromosomal region (-c/--chromosome).",
                                    "type": "int",
                                    "value": 1000000
                                },
                                "y_max": {
                                    "default": null,
                                    "desc": "y-axis upper limit.",
                                    "type": "int",
                                    "value": null
                                },
                                "y_min": {
                                    "default": null,
                                    "desc": "y-axis lower limit.",
                                    "tyoe": "int",
                                    "value": null
                                },
                                "zygosity_freq": {
                                    "default": 0.25,
                                    "desc": "Ignore VCF's genotypes (GT field) and instead infer zygosity from allele frequencies.",
                                    "typ": "float",
                                    "value": 0.25
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "CNVkitSegment": {
                    "desc": "# Run cnvkit.py segment\n\nFor segmentation methods, see\nhttps://cnvkit.readthedocs.io/en/stable/pipeline.html#segmentation-methods",
                    "is_start": false,
                    "order": 8,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cnvkit": "cnvkit.py",
                                "drop_low_coverage": false,
                                "drop_outliers": 10,
                                "method": "cbs",
                                "min_variant_depth": 20,
                                "ncores": 1,
                                "rscript": "Rscript",
                                "smooth_cbs": false,
                                "threshold": null,
                                "zygosity_freq": 0.25
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cnvkit": {
                                    "default": "cnvkit.py",
                                    "desc": "Path to cnvkit.py.<br />\nDefaults to group argument `cnvkit`.",
                                    "pgarg": true,
                                    "value": "cnvkit.py"
                                },
                                "drop_low_coverage": {
                                    "default": false,
                                    "desc": "Drop very-low-coverage bins before segmentation to avoid false-positive deletions in poor-quality tumor samples..<br />\nDefaults to group argument `drop_low_coverage`.",
                                    "flag": true,
                                    "pgarg": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "drop_outliers": {
                                    "default": 10,
                                    "desc": "Drop outlier bins more than this many multiples of the 95th quantile away from the average within a rolling window. Set to 0 for no outlier filtering.",
                                    "type": "int",
                                    "value": 10
                                },
                                "method": {
                                    "default": "cbs",
                                    "desc": "Method to use for segmentation.<br />\nCandidates - cbs, flasso, haar, none, hmm, hmm-tumor, hmm-germline",
                                    "value": "cbs"
                                },
                                "min_variant_depth": {
                                    "default": 20,
                                    "desc": "Minimum read depth for a SNV to be displayed in the b-allele frequency plot..<br />\nDefaults to group argument `min_variant_depth`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 20
                                },
                                "ncores": {
                                    "default": 1,
                                    "desc": "Number of subprocesses to segment in parallel.<br />\n0 or negative for all available cores.<br />\nDefaults to group argument `ncores`.",
                                    "pgarg": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "rscript": {
                                    "default": "Rscript",
                                    "desc": "Path to Rscript.<br />\nDefaults to group argument `rscript`.",
                                    "pgarg": true,
                                    "value": "Rscript"
                                },
                                "smooth_cbs": {
                                    "default": false,
                                    "desc": "Perform an additional smoothing before CBS segmentation, which in some cases may increase the sensitivity.<br />\nUsed only for CBS method.",
                                    "flag": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "threshold": {
                                    "default": null,
                                    "desc": "Significance threshold (p-value or FDR, depending on method) to accept breakpoints during segmentation. For HMM methods, this is the smoothing window size.",
                                    "value": null
                                },
                                "zygosity_freq": {
                                    "default": 0.25,
                                    "desc": "Ignore VCF's genotypes (GT field) and instead infer zygosity from allele frequencies..<br />\nDefaults to group argument `zygosity_freq`.",
                                    "pgarg": true,
                                    "type": "float",
                                    "value": 0.25
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "python",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str"
                                },
                                "report_no_collapse_pgs": {
                                    "default": false,
                                    "desc": "Proc groups that are not collapsed in report index page. `true` to collapse all proc groups and `false` to collapse none.",
                                    "type": "bool",
                                    "value": true
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto"
                                }
                            }
                        }
                    }
                },
                "MetaFile": {
                    "desc": "# Pass by the metafile to the next process.\n\nWhen the group argument `metafile` is provided, it will be used\nas the input data, otherwise, this process group should be a\npart of a pipeline, and the metafile will be passed by its\nrequired processes.",
                    "hidden": true,
                    "is_start": true,
                    "order": 0,
                    "value": {}
                }
            },
            "desc": "# The CNVkit pipeline\n\nUnlike `cnvkit.py batch`, this decouples the steps of the `batch` command so\nthat we can control the details of each step.\n\nOptions for different processes can be specified by `[CNVkitXXX.envs.xxx]`\nSee `biopipen.ns.cnvkit.CNVkitXXX` for more details.\n\nTo run this pipeline from command line, with the `pipen-run` plugin:\n>>> # In this case, `pipeline.cnvkit_pipeline.metafile` must be provided\n>>> pipen run cnvkit_pipeline CNVkitPipeline <other pipeline args>\n\nTo use this as a dependency for other pipelines -\n>>> from biopipen.ns.cnvkit_pipeline import CNVkitPipeline\n>>> pipeline = CNVkitPipeline(<options>)\n>>> # pipeline.starts: Start processes of the pipeline\n>>> # pipeline.ends: End processes of the pipeline\n>>> # pipeline.procs.<proc>: The process with name <proc>"
        }
    },
    "RUNNING_OPTIONS": {
        "DOCKER": {
            "allow_run": false,
            "command": "docker run -p 18521:18521 --rm -w /workdir -v .:/workdir biopipen/cnvkit-pipeline:${tag} pipen run cnvkit_pipeline CNVkitPipeline @${configfile}",
            "configfile": "configfile",
            "desc": "Compose a command to the pipeline using docker.\n\nNote that if pipen-board (the web interface) is running via docker, you should choose LOCAL instead, if you want to run the pipeline in the same container.\n\nOtherwise, you can copy the command and run it in the terminal.\n",
            "editable": true,
            "value": {
                "configfile": {
                    "desc": "The configuration file for the pipeline, typically generated by this wizard\n",
                    "placeholder": "Example.config.toml",
                    "required": true,
                    "value": "Example.config.toml"
                },
                "tag": {
                    "desc": "The tag of the docker image on dockerhub.\nYou can find the available tags at https://hub.docker.com/r/biopipen/cnvkit-pipeline/tags",
                    "placeholder": "master",
                    "required": true,
                    "value": "master"
                }
            }
        },
        "LOCAL": {
            "allow_run": true,
            "command": "pipen run cnvkit_pipeline CNVkitPipeline @${configfile}",
            "configfile": "configfile",
            "desc": "Compose a command to run the pipeline locally",
            "editable": true,
            "order": -1,
            "value": {
                "configfile": {
                    "desc": "The configuration file for the pipeline, typically generated by this wizard\n",
                    "placeholder": "Example.config.toml",
                    "required": true,
                    "value": "Example.config.toml"
                }
            }
        },
        "SINGULARITY": {
            "allow_run": false,
            "command": "singularity run --pwd /workdir -B .:/workdir -c -e -w docker://biopipen/cnvkit-pipeline:${tag} pipen run cnvkit_pipeline CNVkitPipeline @${configfile}",
            "configfile": "configfile",
            "desc": "Compose a command to the pipeline using singularity.\n\nNote that if pipen-board (the web interface) is running via singularity, you should choose LOCAL instead, if you want to run the pipeline in the same container.\n\nOtherwise, you can copy the command and run it in the terminal.\n",
            "editable": true,
            "order": 9,
            "value": {
                "configfile": {
                    "desc": "The configuration file for the pipeline, typically generated by this wizard\n",
                    "placeholder": "Example.config.toml",
                    "required": true,
                    "value": "Example.config.toml"
                },
                "tag": {
                    "desc": "The tag of the docker image on dockerhub.\nYou can find the available tags at https://hub.docker.com/r/biopipen/cnvkit-pipeline/tags",
                    "placeholder": "master",
                    "required": true,
                    "value": "master"
                }
            }
        }
    }
}