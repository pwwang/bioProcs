{
    "PIPELINE_OPTIONS": {
        "cache": {
            "default": null,
            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
            "hidden": true,
            "placeholder": "true",
            "type": "auto",
            "value": null
        },
        "desc": {
            "changed": false,
            "default": "Basic analysis for single cell RNA-seq data",
            "desc": "The description of the pipeline, shows in the log and report.",
            "type": "str",
            "value": "Basic analysis for single cell RNA-seq data"
        },
        "dirsig": {
            "default": null,
            "desc": "How deep we should go to check directory signature",
            "hidden": true,
            "placeholder": "1",
            "type": "int",
            "value": null
        },
        "error_strategy": {
            "choices": [
                "ignore",
                "retry",
                "halk"
            ],
            "choices_desc": [
                "Ignore the error and continue to run next jobs",
                "Retry the job",
                "Halt the pipeline"
            ],
            "default": "ignore",
            "desc": "What to do when a job fails",
            "hidden": true,
            "type": "choice",
            "value": "ignore"
        },
        "forks": {
            "changed": false,
            "default": null,
            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
            "placeholder": "1",
            "type": "int",
            "value": null
        },
        "loglevel": {
            "choices": [
                "debug",
                "info",
                "warning",
                "error",
                "critical"
            ],
            "default": "info",
            "desc": "Logging level. This affects the log level of the main plugin.",
            "hidden": true,
            "type": "choice",
            "value": "info"
        },
        "name": {
            "changed": false,
            "default": null,
            "desc": "The name of the pipeline. It will affect the names of working directory and the result directory",
            "placeholder": "Example",
            "readonly": true,
            "type": "str",
            "value": "Example"
        },
        "num_retries": {
            "default": null,
            "desc": "Number of retries when a job fails. ",
            "hidden": true,
            "placeholder": "3",
            "type": "int",
            "value": null
        },
        "outdir": {
            "changed": false,
            "default": null,
            "desc": "The output directory of your pipeline",
            "placeholder": "./<name>-output",
            "type": "str",
            "value": null
        },
        "plugin_opts": {
            "default": {},
            "desc": "The plugin options of your pipeline",
            "value": {
                "report_no_collapse_pgs": {
                    "changed": false,
                    "desc": "Do not collapse proc groups in report index page",
                    "order": 998,
                    "type": "bool",
                    "value": true,
                    "readonly": true
                },
                "<plugin_name>_<plugin_opt_name>": {
                    "changed": false,
                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                    "order": 999,
                    "type": "str",
                    "value": [
                        [
                            "",
                            ""
                        ]
                    ]
                }
            }
        },
        "scheduler": {
            "default": null,
            "desc": "The scheduler to use",
            "hidden": true,
            "placeholder": "local",
            "value": null
        },
        "scheduler_opts": {
            "default": {},
            "desc": "The scheduler options",
            "value": {
                "<option_name>": {
                    "changed": false,
                    "desc": "The value of the option",
                    "order": 999,
                    "type": "auto",
                    "value": [
                        [
                            "",
                            ""
                        ]
                    ]
                }
            }
        },
        "submission_batch": {
            "default": null,
            "desc": "Number of jobs to submit at a time",
            "hidden": true,
            "placeholder": "8",
            "type": "int",
            "value": null
        }
    },
    "PROCESSES": {},
    "PROCGROUPS": {
        "ScrnaBasic": {
            "ARGUMENTS": {
                "clustering": {
                    "changed": true,
                    "choice": true,
                    "choices": [
                        "supervised",
                        "unsupervised",
                        "both"
                    ],
                    "choices_desc": [
                        "Mapping the cells to given reference.",
                        "Clustering the cells without reference.",
                        "Both supervised and unsupervised clustering."
                    ],
                    "default": null,
                    "desc": "Which clustering method to use.\n- `supervised`: Mapping the cells to given reference.<br />\nUsing Seurat Reference Mapping procedure.<br />\nSee: https://satijalab.org/seurat/articles/multimodal_reference_mapping.html\n- `unsupervised`: Clustering the cells without reference.<br />\nUsing Seurat FindClusters procedure.\n- `both`: Both supervised and unsupervised clustering.<br />\nPerforming both of the above procedures. The unsupervised clustering will be added as `seurat_clusters_unsupervised` to the metadata.\n",
                    "required": true,
                    "type": "choice",
                    "value": "unsupervised"
                },
                "infile": {
                    "changed": true,
                    "default": null,
                    "desc": "The input file. Either a tab-delimited file containing the information of metadata and paths to results of cellranger or a seurat object has been saved as RDS file (with extension `.rds` or `.RDS`), which QC is assumed to be done.<br />\nAs for the tab-delimited file, it should have two columns:<br />\n`Sample` and `RNADir`. `Sample` should be the first column with unique identifiers for the samples and `RNADir` indicates where the barcodes, genes, expression matrices are.",
                    "value": "/example/example.txt"
                },
                "is_seurat": {
                    "changed": false,
                    "default": false,
                    "desc": "Whether the input file is a seurat object in RDS format.<br />\nIf this process group runs independently, this argument should not be set. It will be recognized automatically by the extension of `infile`. However, if this process group is run as a part of a pipeline, this argument should be set manually since `infile` should not be set in this case. It will be passed by other processes",
                    "flag": true,
                    "type": "bool",
                    "value": false
                },
                "ref": {
                    "changed": false,
                    "default": null,
                    "desc": "The reference file for supervised clustering. It should be an RDS file (with extension `.rds` or `.RDS`) containing a seurat object, or a h5 file (with extension `.h5` or `.h5seurat`) that can be loaded by `Seurat::LoadH5Seurat()`.",
                    "value": null
                }
            },
            "PROCESSES": {
                "ScrnaBasicAnnotate": {
                    "desc": "# Annotate cell types\n\nEither use `scType` or `scCATCH` to annotate cell types, or directly\nassign cell types.",
                    "is_start": false,
                    "order": 5,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cell_types": [],
                                "sccatch_args": {
                                    "cancer": null,
                                    "species": [],
                                    "tissue": null
                                },
                                "sctype_db": "/home/mayo/m161047/reference/ScTypeDB_full.xlsx",
                                "sctype_tissue": null,
                                "tool": "sctype"
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cell_types": {
                                    "changed": false,
                                    "default": [],
                                    "desc": "The cell types to use for direct annotation Each a list of cell type names, or a dict with keys as the old identity and values as the new cell type.",
                                    "type": "json",
                                    "value": []
                                },
                                "sccatch_args": {
                                    "default": {
                                        "cancer": null,
                                        "species": [],
                                        "tissue": null
                                    },
                                    "desc": "The arguments for `scCATCH::findmarkergene()` if `tool` is `sccatch`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "Other arguments for `scCATCH::findmarkergene()` See https://www.rdocumentation.org/packages/scCATCH/versions/3.2.2/topics/findmarkergene.<br />\nYou can pass an RDS file to `marker` to work as custom marker. If so, `if_use_custom_marker` will be set to `TRUE` automatically.",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "cancer": {
                                            "changed": false,
                                            "default": null,
                                            "desc": "If the sample is from cancer tissue, then the cancer type may be defined.",
                                            "value": null
                                        },
                                        "species": {
                                            "changed": false,
                                            "choice": true,
                                            "choices": [
                                                "Human",
                                                "Mouse"
                                            ],
                                            "choices_desc": [
                                                "",
                                                ""
                                            ],
                                            "default": [],
                                            "desc": "The specie of cells.\n- `Human`: \n- `Mouse`: \n",
                                            "type": "choice"
                                        },
                                        "tissue": {
                                            "changed": false,
                                            "default": null,
                                            "desc": "Tissue origin of cells must be defined.",
                                            "value": null
                                        }
                                    }
                                },
                                "sctype_db": {
                                    "changed": false,
                                    "default": "/home/mayo/m161047/reference/ScTypeDB_full.xlsx",
                                    "desc": "The database to use for sctype.<br />\nCheck examples at https://github.com/IanevskiAleksandr/sc-type/blob/master/ScTypeDB_full.xlsx",
                                    "value": "/example/ScTypeDB_full.xlsx"
                                },
                                "sctype_tissue": {
                                    "changed": true,
                                    "default": null,
                                    "desc": "The tissue to use for `sctype`.<br />\nAvaiable tissues should be the first column (`tissueType`) of `sctype_db`.<br />\nExamples are `Immune system`, `Pancreas`, `Liver`, `Eye`, `Kidney`, `Brain`, `Lung`, `Adrenal`, `Heart`, `Intestine`, `Muscle`, `Placenta`, `Spleen`, `Stomach` and `Thymus`.",
                                    "value": "Immune system"
                                },
                                "tool": {
                                    "changed": false,
                                    "choice": true,
                                    "choices": [
                                        "sctype",
                                        "sccatch",
                                        "direct"
                                    ],
                                    "choices_desc": [
                                        "Use `scType` to annotate cell types.",
                                        "Use `scCATCH` to annotate cell types.",
                                        "Directly assign cell types"
                                    ],
                                    "default": "sctype",
                                    "desc": "The tool to use for cell type annotation.\n- `sctype`: Use `scType` to annotate cell types.<br />\nSee https://github.com/IanevskiAleksandr/sc-type\n- `sccatch`: Use `scCATCH` to annotate cell types.<br />\nSee https://github.com/ZJUFanLab/scCATCH\n- `direct`: Directly assign cell types\n",
                                    "type": "choice",
                                    "value": "sctype"
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicInput": {
                    "desc": "# Input file for scrna_basic process group\n\nTo specify the input file, use the `infile` argument of the\nprocess group.",
                    "hidden": true,
                    "is_start": true,
                    "order": 0,
                    "value": {}
                },
                "ScrnaBasicMarkers": {
                    "desc": "# Find markers between different groups of cells\n\nWhen only `group-by` is specified as `\"seurat_clusters\"` in\n`envs.cases`, the markers will be found for all the clusters.\n\nYou can also find the differentially expressed genes between\nany two groups of cells by setting `group-by` to a different\ncolumn name in metadata. Follow `envs.cases` for more details.\n\nIf the group argument `clustering` is set to `\"both\"`,\nyou can set `group-by` to `\"seurat_clusters_unsupervised\"` in\na different case to find the markers for the unsupervised clusters.",
                    "is_start": false,
                    "order": 9,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cases": {
                                    "Cluster": {
                                        "group-by": "seurat_clusters"
                                    }
                                },
                                "dbs": [
                                    "GO_Biological_Process_2021",
                                    "GO_Cellular_Component_2021",
                                    "GO_Molecular_Function_2021",
                                    "KEGG_2021_Human"
                                ],
                                "ncores": 1,
                                "sigmarkers": "p_val_adj < 0.05"
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cases": {
                                    "changed": false,
                                    "default": {
                                        "Cluster": {
                                            "group-by": "seurat_clusters"
                                        }
                                    },
                                    "desc": "The cases to find markers for.<br />\nFor example:<br />\n>>> {\n>>>     \"case1\": {\n>>>         \"ident-1\": \"Tumor\",\n>>>         \"ident-2\": \"Normal\",\n>>>         \"group-by\": \"Source\",\n>>>         # focus on a subset of cells\n>>>         \"filter\": \"SampleType != 'Control'\"\n>>>         # other arguments for Seruat::FindMarkers()\n>>>     }\n>>> }\nWe can also use a new `group.by`:<br />\n>>> {\n>>>     \"case2\": {\n>>>         \"ident-1\": \"Case\",\n>>>         \"ident-2\": \"Control\",\n>>>         \"group-by\": \"Group\",\n>>>         # Do the comparison in each cluster\n>>>         \"each\": \"seurat_clusters\",\n>>>         # other arguments for Seruat::FindMarkers()\n>>>         # Filter after mutaters\n>>>         \"filter2\": \"SampleType != 'Control'\",\n>>>         # Use `filer` to filter before mutaters\n>>>         \"mutaters\": {\n>>>             \"Group\" = \"if_else(Source %%in%% c('Tumor', 'Normal'), 'Case', 'Control')\"\n>>>         }\n>>>     }\n>>> }\nIf \"ident-2\" is not provided, it will use the rest of the cells as \"ident-2\".<br />\nIf only \"group-by\" is given, will call `FindAllMarkers()`.",
                                    "type": "json",
                                    "value": {
                                        "Cluster": {
                                            "group-by": "seurat_clusters"
                                        }
                                    }
                                },
                                "dbs": {
                                    "changed": false,
                                    "default": [
                                        "GO_Biological_Process_2021",
                                        "GO_Cellular_Component_2021",
                                        "GO_Molecular_Function_2021",
                                        "KEGG_2021_Human"
                                    ],
                                    "desc": "The dbs to do enrichment analysis for significant markers See below for all librarys.<br />\nhttps://maayanlab.cloud/Enrichr/#libraries",
                                    "list": true,
                                    "type": "list",
                                    "value": [
                                        "GO_Biological_Process_2021",
                                        "GO_Cellular_Component_2021",
                                        "GO_Molecular_Function_2021",
                                        "KEGG_2021_Human"
                                    ]
                                },
                                "ncores": {
                                    "changed": false,
                                    "default": 1,
                                    "desc": "Number of cores to use to parallelize Seurat functions using `future::plan(strategy = \"multicore\", workers = ncores)`",
                                    "value": 1
                                },
                                "sigmarkers": {
                                    "changed": false,
                                    "default": "p_val_adj < 0.05",
                                    "desc": "An expression passed to `dplyr::filter()` to filter the significant markers for enrichment analysis.<br />\nAvailable variables are `p_val`, `avg_log2FC`, `pct.1`, `pct.2` and `p_val_adj`. For example, `\"p_val_adj < 0.05 & abs(avg_log2FC) > 1\"`",
                                    "value": "p_val_adj < 0.05"
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "report_paging": {
                                    "changed": false,
                                    "desc": "The number of sections per page in the report",
                                    "order": 998,
                                    "type": "int",
                                    "value": 5
                                },
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicMerge": {
                    "desc": "# Merge the supervised and unsupervised clustering results\n\nAdd unsupervised clustering as metadata to the seurat object\nwith supervised clustering.\n\nThe unsupervised clustering results are stored in the metadata\n`seurat_clusters_unsupervised`.\n\n**Only available when the group argument `clustering` is set to\n`both`.**",
                    "hidden": true,
                    "is_start": false,
                    "order": 6,
                    "value": {}
                },
                "ScrnaBasicPrepareAndQC": {
                    "desc": "# Load, prepare and apply QC to data, using `Seurat`\n\nThis process will -\n- Prepare the seurat object\n- Apply QC to the data\n\nSee also\n- https://satijalab.org/seurat/articles/pbmc3k_tutorial.html#standard-pre-processing-workflow-1)\n- https://nbisweden.github.io/workshop-scRNAseq/labs/compiled/seurat/seurat_01_qc.html#Create_one_merged_object",
                    "is_start": false,
                    "order": 1,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cell_qc": null,
                                "gene_qc": {
                                    "min_cells": 3
                                },
                                "ncores": 1
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "cell_qc": {
                                    "changed": true,
                                    "default": null,
                                    "desc": "Filter expression to filter cells, using `tidyrseurat::filter()`.<br />\nAvailable QC keys include `nFeature_RNA`, `nCount_RNA`, `percent.mt`, `percent.ribo`, `percent.hb`, and `percent.plat` For example: `nFeature_RNA > 200 & percent.mt < 5` will keep cells with more than 200 genes and less than 5%% mitochondrial genes.",
                                    "value": "nFeature_RNA > 200"
                                },
                                "gene_qc": {
                                    "default": {
                                        "min_cells": 3
                                    },
                                    "desc": "Filter genes. Currently only `min_cells` is supported.<br />\n`gene_qc` is applied after `cell_qc`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "min_cells": {
                                            "changed": false,
                                            "default": 3,
                                            "desc": "The minimum number of cells that a gene must be expressed in to be kept.",
                                            "value": 3
                                        }
                                    }
                                },
                                "ncores": {
                                    "changed": false,
                                    "default": 1,
                                    "desc": "Number of cores to use.<br />\nUsed in `future::plan(strategy = \"multicore\", workers = <ncores>)` to parallelize some Seurat procedures.",
                                    "value": 1
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicScGSEA": {
                    "desc": "# Gene set enrichment analysis for cells in different groups using `fgsea`\n\n",
                    "is_start": false,
                    "order": 7,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "cases": {},
                                "eps": 0,
                                "gmtfile": "",
                                "maxSize": 100,
                                "method": "s2n",
                                "minSize": 10,
                                "ncores": 1,
                                "top": 20
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "<rest>": {
                                    "changed": false,
                                    "desc": "Rest arguments for [`fgsea()`](https://rdrr.io/bioc/fgsea/man/fgsea.html) See also https://rdrr.io/bioc/fgsea/man/fgseaMultilevel.html",
                                    "order": 999,
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                },
                                "cases": {
                                    "changed": false,
                                    "default": {},
                                    "desc": "The cases to find markers for.<br />\n`ident-2` is required for each case. One could also use placeholders for the cases.<br />\nTo enable this, you need `percluster = True` in the config. Currently only cluster is supported.<br />\nOne could use `{cluster}` or `{ident}` to denote the clusters.<br />\nFor example:<br />\n>>> {\n>>>     \"case1\": {\n>>>         # Add a new column in metadata\n>>>         \"mutaters\": { \"Group\" = \"if_else(Response == 'PD1' | Response == 'PD2', 'PD1PD2', Response)\" },\n>>>         # Only on cluster 0\n>>>         \"filter\": \"seurat_clusters == '0'\",\n>>>         # Groups\n>>>         \"ident-1\" = \"CR\",\n>>>         \"ident-2\" = \"PD1PD2\",\n>>>         \"group-by\" = \"Group\"\n>>>     }\n>>> }",
                                    "type": "json",
                                    "value": {
                                        "STIM_vs_CTRL_mono": {
                                            "filter": "seurat_clusters == 'Classical Monocytes'",
                                            "group-by": "Sample",
                                            "ident-1": "STIM",
                                            "ident-2": "CTRL"
                                        }
                                    }
                                },
                                "eps": {
                                    "changed": false,
                                    "default": 0,
                                    "desc": "This parameter sets the boundary for calculating the p value.",
                                    "type": "float",
                                    "value": 0
                                },
                                "gmtfile": {
                                    "changed": true,
                                    "default": "",
                                    "desc": "The pathways in GMT format, with the gene names/ids in the same format as the seurat object",
                                    "required": true,
                                    "value": "/example/KEGG_pathways.gmt"
                                },
                                "maxSize": {
                                    "changed": false,
                                    "default": 100,
                                    "desc": "Maximal size of a gene set to test. All pathways above the threshold are excluded.",
                                    "type": "int",
                                    "value": 100
                                },
                                "method": {
                                    "changed": false,
                                    "choice": true,
                                    "choices": [
                                        "signal_to_noise",
                                        "s2n",
                                        "abs_signal_to_noise",
                                        "abs_s2n",
                                        "t_test",
                                        "ratio_of_classes",
                                        "diff_of_classes",
                                        "log2_ratio_of_classes"
                                    ],
                                    "choices_desc": [
                                        "Signal to noise.",
                                        "Alias of signal_to_noise.",
                                        "The absolute value of signal_to_noise.",
                                        "Alias of abs_signal_to_noise.",
                                        "T test.",
                                        "Also referred to as fold change.",
                                        "Difference of class means.",
                                        "Log2 ratio of class means."
                                    ],
                                    "default": "s2n",
                                    "desc": "The method to do the preranking.\n- `signal_to_noise`: Signal to noise.<br />\nThe larger the differences of the means (scaled by the standard deviations); that is, the more distinct the gene expression is in each phenotype and the more the gene acts as a \"class marker\".\n- `s2n`: Alias of signal_to_noise.\n- `abs_signal_to_noise`: The absolute value of signal_to_noise.\n- `abs_s2n`: Alias of abs_signal_to_noise.\n- `t_test`: T test.<br />\nUses the difference of means scaled by the standard deviation and number of samples.\n- `ratio_of_classes`: Also referred to as fold change.<br />\nUses the ratio of class means to calculate fold change for natural scale data.\n- `diff_of_classes`: Difference of class means.<br />\nUses the difference of class means to calculate fold change for nature scale data\n- `log2_ratio_of_classes`: Log2 ratio of class means.<br />\nUses the log2 ratio of class means to calculate fold change for natural scale data.<br />\nThis is the recommended statistic for calculating fold change for log scale data.\n",
                                    "type": "choice",
                                    "value": "s2n"
                                },
                                "minSize": {
                                    "changed": false,
                                    "default": 10,
                                    "desc": "Minimal size of a gene set to test. All pathways below the threshold are excluded.",
                                    "type": "int",
                                    "value": 10
                                },
                                "ncores": {
                                    "changed": false,
                                    "default": 1,
                                    "desc": "Number of cores to use to parallelize the groups",
                                    "value": 1
                                },
                                "top": {
                                    "changed": false,
                                    "default": 20,
                                    "desc": "Do gsea table and enrich plot for top N pathways.<br />\nIf it is < 1, will apply it to `padj`, selecting pathways with `padj` < `top`.",
                                    "type": "auto",
                                    "value": 20
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicSupervised": {
                    "desc": "# Map the seurat object to reference\n\nSee: https://satijalab.org/seurat/articles/integration_mapping.html\nand https://satijalab.org/seurat/articles/multimodal_reference_mapping.html\n\n**Only available when the group argument `clustering` is set to\n`supervised` or `both`.**",
                    "is_start": false,
                    "order": 2,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "FindTransferAnchors": {
                                    "normalization-method": "SCT",
                                    "reference-reduction": "spca"
                                },
                                "MapQuery": {
                                    "reduction-model": "wnn.umap",
                                    "refdata": {
                                        "celltype-l1": "celltype.l1",
                                        "celltype-l2": "celltype.l2",
                                        "predicted_ADT": "ADT"
                                    },
                                    "reference-reduction": "spca"
                                },
                                "MappingScore": {},
                                "SCTransform": {
                                    "do-center": true,
                                    "do-correct-umi": false,
                                    "do-scale": false
                                },
                                "alias": "seurat_clusters",
                                "ref": null,
                                "use": "predicted.celltype.l2"
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "FindTransferAnchors": {
                                    "default": {
                                        "normalization-method": "SCT",
                                        "reference-reduction": "spca"
                                    },
                                    "desc": "Arguments for [`FindTransferAnchors()`](https://satijalab.org/seurat/reference/findtransferanchors)",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/findtransferanchors.<br />\nNote that the hyphen (`-`) will be transformed into `.` for the keys.",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "normalization-method": {
                                            "changed": false,
                                            "choice": true,
                                            "choices": [
                                                "LogNormalize",
                                                "SCT"
                                            ],
                                            "choices_desc": [
                                                "Log-normalize the data matrix",
                                                "Scale data using the SCTransform method"
                                            ],
                                            "default": "SCT",
                                            "desc": "Name of normalization method used.\n- `LogNormalize`: Log-normalize the data matrix\n- `SCT`: Scale data using the SCTransform method\n",
                                            "type": "choice",
                                            "value": "SCT"
                                        },
                                        "reference-reduction": {
                                            "changed": false,
                                            "default": "spca",
                                            "desc": "Name of dimensional reduction to use from the reference if running the pcaproject workflow.<br />\nOptionally enables reuse of precomputed reference dimensional reduction.",
                                            "value": "spca"
                                        }
                                    }
                                },
                                "MapQuery": {
                                    "default": {
                                        "reduction-model": "wnn.umap",
                                        "refdata": {
                                            "celltype-l1": "celltype.l1",
                                            "celltype-l2": "celltype.l2",
                                            "predicted_ADT": "ADT"
                                        },
                                        "reference-reduction": "spca"
                                    },
                                    "desc": "Arguments for [`MapQuery()`](https://satijalab.org/seurat/reference/mapquery)",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/mapquery Note that the hyphen (`-`) will be transformed into `.` for the keys.",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "reduction-model": {
                                            "changed": false,
                                            "default": "wnn.umap",
                                            "desc": "`DimReduc` object that contains the umap model",
                                            "value": "wnn.umap"
                                        },
                                        "refdata": {
                                            "changed": false,
                                            "default": {
                                                "celltype-l1": "celltype.l1",
                                                "celltype-l2": "celltype.l2",
                                                "predicted_ADT": "ADT"
                                            },
                                            "desc": "Data to transfer",
                                            "type": "json",
                                            "value": {
                                                "celltype-l1": "celltype.l1",
                                                "celltype-l2": "celltype.l2",
                                                "predicted_ADT": "ADT"
                                            }
                                        },
                                        "reference-reduction": {
                                            "changed": false,
                                            "default": "spca",
                                            "desc": "Name of reduction to use from the reference for neighbor finding",
                                            "value": "spca"
                                        }
                                    }
                                },
                                "MappingScore": {
                                    "default": {},
                                    "desc": "Arguments for [`MappingScore()`](https://satijalab.org/seurat/reference/mappingscore)",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/mappingscore Note that the hyphen (`-`) will be transformed into `.` for the keys.",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "SCTransform": {
                                    "default": {
                                        "do-center": true,
                                        "do-correct-umi": false,
                                        "do-scale": false
                                    },
                                    "desc": "Arguments for [`SCTransform()`](https://satijalab.org/seurat/reference/sctransform)",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/sctransform Note that the hyphen (`-`) will be transformed into `.` for the keys.",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "do-center": {
                                            "changed": false,
                                            "default": true,
                                            "desc": "Whether to center residuals to have mean zero?",
                                            "flag": true,
                                            "type": "bool",
                                            "value": true
                                        },
                                        "do-correct-umi": {
                                            "changed": false,
                                            "default": false,
                                            "desc": "Place corrected UMI matrix in assay counts slot?",
                                            "flag": true,
                                            "type": "bool",
                                            "value": false
                                        },
                                        "do-scale": {
                                            "changed": false,
                                            "default": false,
                                            "desc": "Whether to scale residuals to have unit variance?",
                                            "flag": true,
                                            "type": "bool",
                                            "value": false
                                        }
                                    }
                                },
                                "alias": {
                                    "changed": false,
                                    "default": "seurat_clusters",
                                    "desc": "The name of an aliasied column to `use`.<br />\nThis is helpful for the downstream analysis where the column name is used as the cluster.",
                                    "value": "seurat_clusters"
                                },
                                "ref": {
                                    "changed": false,
                                    "default": null,
                                    "desc": "The reference seurat object file.<br />\nEither an RDS file or a h5seurat file that can be loaded by `Seurat::LoadH5Seurat()`.<br />\nThe file type is determined by the extension. `.rds` or `.RDS` for RDS file, `.h5seurat` or `.h5` for h5seurat file..<br />\nDefaults to the `ref` argument of the process group.",
                                    "pgarg": true,
                                    "value": null
                                },
                                "use": {
                                    "changed": false,
                                    "choice": true,
                                    "choices": [
                                        "predicted.celltype.l1",
                                        "predicted.celltype.l2"
                                    ],
                                    "choices_desc": [
                                        "The first level of predicted cell type",
                                        "The second level of predicted cell type"
                                    ],
                                    "default": "predicted.celltype.l2",
                                    "desc": "Which level of cell type to use for further analysis and being aliased to `alias`\n- `predicted.celltype.l1`: The first level of predicted cell type\n- `predicted.celltype.l2`: The second level of predicted cell type\n",
                                    "type": "choice",
                                    "value": "predicted.celltype.l2"
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicSupervisedStats": {
                    "desc": "# Statistics of the supervised clustering.\n\nIncluding the number/fraction of cells in each cluster,\nthe gene expression values and dimension reduction plots.\n\n**Only available when the group argument `clustering` is set to\n`supervised` or `both`.**",
                    "is_start": false,
                    "order": 3,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "dimplots": {
                                    "Ident": {
                                        "devpars": {
                                            "height": 1000,
                                            "res": 100,
                                            "width": 1000
                                        },
                                        "group-by": "ident"
                                    }
                                },
                                "exprs": {},
                                "stats": {
                                    "fracCells_Sample": {
                                        "by": "Sample"
                                    },
                                    "ncells_All": {},
                                    "ncells_Sample": {
                                        "by": "Sample"
                                    }
                                }
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "dimplots": {
                                    "changed": false,
                                    "default": {
                                        "Ident": {
                                            "devpars": {
                                                "height": 1000,
                                                "res": 100,
                                                "width": 1000
                                            },
                                            "group-by": "ident"
                                        }
                                    },
                                    "desc": "The dimensional reduction plots.<br />\n* `<case>` - The case to plot.<br />\nKeys are the arguments for `Seurat::Dimplot()`, plus `devpars` for the plots. `devpars` is a dictionary with keys `res`, `height` and `width` to specify the resolution, height and width of the plot. The hyphen (`-`) in the keys will be replaced by `.`.",
                                    "type": "json",
                                    "value": {
                                        "Ident": {
                                            "devpars": {
                                                "height": 1000,
                                                "res": 100,
                                                "width": 1000
                                            },
                                            "group-by": "ident"
                                        }
                                    }
                                },
                                "exprs": {
                                    "changed": false,
                                    "default": {},
                                    "desc": "The expression values to plot.<br />\n* `genes` - The set of genes for the plots, unless `features` for those plots is specified. Could also specify a file with genes (one per line).<br />\n* `ridgeplots` - The ridge plots for the gene expressions.<br />\nSee [`Seurat::RidgePlot`](https://satijalab.org/seurat/reference/ridgeplot).<br />\n* `vlnplots` - Violin plots for the gene expressions.<br />\nSee [`Seurat::VlnPlot`](https://satijalab.org/seurat/reference/vlnplot).<br />\nYou can have `boxplot` key to add `geom_boxplot()` to the violin plots.<br />\n* `featureplots` - The feature plots for the gene expressions.<br />\nSee [`Seurat::FeaturePlot`](https://satijalab.org/seurat/reference/featureplot).<br />\n* `dotplot` - Dot plots for the gene expressions.<br />\nSee [`Seurat::DotPlot`](https://satijalab.org/seurat/reference/dotplot).<br />\n* `heatmap` - Heatmap for the gene expressions.<br />\nSee [`Seurat::DoHeatmap`](https://satijalab.org/seurat/reference/doheatmap).<br />\nYou can specify `average=True` to plot on the average of the expressions.<br />\n* `table` - The table for the gene expressions.<br />\n(supported keys: title, log2, subset and features).<br />\n* All the above can have `devpars` to define the output figures and `plus` to add elements to the `ggplot` object.<br />\nYou can also have `subset` to subset the data.<br />\nMultiple cases can be distinguished by `ridgeplots` and `ridgeplots_1`.<br />\nIf no `features` specified, will use `genes`. If you want to use the default gene list `VariantFeatures(srtobj)[1:20]`, specify `features = \"default\"`. Or you can also specify the genes directly to `features`.",
                                    "type": "json",
                                    "value": {}
                                },
                                "stats": {
                                    "changed": false,
                                    "default": {
                                        "fracCells_Sample": {
                                            "by": "Sample"
                                        },
                                        "ncells_All": {},
                                        "ncells_Sample": {
                                            "by": "Sample"
                                        }
                                    },
                                    "desc": "The number/fraction of cells to plot.<br />\n* `nCells_*` - Number of cells for each cluster.<br />\nYou can specify `by` to group the cells by a metadata column, and `devpars` to specify the device parameters for the plot.<br />\nYou can also specify `filter` to filter the cells under certain conditions using metadata columns.<br />\n* `fracCells_*` - Fraction of cells for each cluster.<br />\nSimilar to `nCells_*`, but the fraction is calculated instead of the absolute number.",
                                    "type": "json",
                                    "value": {
                                        "fracCells_Sample": {
                                            "by": "Sample"
                                        },
                                        "ncells_All": {},
                                        "ncells_Sample": {
                                            "by": "Sample"
                                        }
                                    }
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicUnsupervised": {
                    "desc": "# Determine the clusters of cells without reference\n\nGenerally using Seurat FindClusters procedure.",
                    "is_start": false,
                    "order": 4,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "FindClusters": {
                                    "resolution": 0.8
                                },
                                "FindIntegrationAnchors": {},
                                "FindNeighbors": {},
                                "FindVariableFeatures": {},
                                "IntegrateData": {},
                                "NormalizeData": {},
                                "PrepSCTIntegration": {},
                                "RunPCA": {
                                    "npcs": 30,
                                    "verbose": false
                                },
                                "RunUMAP": {
                                    "dims": 30,
                                    "reduction": "pca"
                                },
                                "SCTransform": {},
                                "ScaleData": {
                                    "verbose": false
                                },
                                "SelectIntegrationFeatures": {
                                    "nfeatures": 3000
                                },
                                "ncores": 1,
                                "use_sct": false
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "FindClusters": {
                                    "default": {
                                        "resolution": 0.8
                                    },
                                    "desc": "Arguments for [`FindClusters()`](https://satijalab.org/seurat/reference/findclusters).<br />\n`object` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/findclusters",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "resolution": {
                                            "changed": false,
                                            "default": 0.8,
                                            "desc": "The resolution of the clustering",
                                            "type": "float",
                                            "value": 0.8
                                        }
                                    }
                                },
                                "FindIntegrationAnchors": {
                                    "default": {},
                                    "desc": "Arguments for [`FindIntegrationAnchors()`](https://satijalab.org/seurat/reference/findintegrationanchors).<br />\n`object.list` and `anchor.features` is specified internally, and `-` in the key will be replaced with `.`.<br />\n`dims=N` will be expanded to `dims=1:N`; The maximal value of `N` will be the minimum of `N` and the number of columns for each sample.<br />\nSample names can also be specified in `reference` instead of indices only.<br />\n`reduction` defaults to `rpca`.<br />\n`normalization.method` defaults to `SCT` if `use_sct` is `True`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/findintegrationanchors",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "FindNeighbors": {
                                    "default": {},
                                    "desc": "Arguments for [`FindNeighbors()`](https://satijalab.org/seurat/reference/findneighbors).<br />\n`object` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/findneighbors",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "FindVariableFeatures": {
                                    "default": {},
                                    "desc": "Arguments for [`FindVariableFeatures()`](https://satijalab.org/seurat/reference/findvariablefeatures).<br />\n`object` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/findvariablefeatures",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "IntegrateData": {
                                    "default": {},
                                    "desc": "Arguments for [`IntegrateData()`](https://satijalab.org/seurat/reference/integratedata).<br />\n`anchorset` is specified internally, and `-` in the key will be replaced with `.`.<br />\n`dims=N` will be expanded to `dims=1:N`; The maximal value of `N` will be the minimum of `N` and the number of columns for each sample.<br />\n`normalization.method` defaults to `SCT` if `use_sct` is `True`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/integratedata",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "NormalizeData": {
                                    "default": {},
                                    "desc": "Arguments for [`NormalizeData()`](https://satijalab.org/seurat/reference/normalizedata).<br />\n`object` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/normalizedata",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "PrepSCTIntegration": {
                                    "default": {},
                                    "desc": "Arguments for [`PrepSCTIntegration()`](https://satijalab.org/seurat/reference/prepsctintegration).<br />\n`object.list` and `anchor.features` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/prepsctintegration",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "RunPCA": {
                                    "default": {
                                        "npcs": 30,
                                        "verbose": false
                                    },
                                    "desc": "Arguments for [`RunPCA()`](https://satijalab.org/seurat/reference/runpca).<br />\n`object` and `features` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/runpca",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "npcs": {
                                            "changed": false,
                                            "default": 30,
                                            "desc": "The number of PCs to compute.<br />\nFor each sample, `npcs` will be no larger than the number of columns - 1.",
                                            "type": "int",
                                            "value": 30
                                        },
                                        "verbose": {
                                            "changed": false,
                                            "default": false,
                                            "desc": "Whether to print the progress",
                                            "flag": true,
                                            "type": "bool",
                                            "value": false
                                        }
                                    }
                                },
                                "RunUMAP": {
                                    "default": {
                                        "dims": 30,
                                        "reduction": "pca"
                                    },
                                    "desc": "Arguments for [`RunUMAP()`](https://satijalab.org/seurat/reference/runumap).<br />\n`object` is specified internally, and `-` in the key will be replaced with `.`.<br />\n`dims=N` will be expanded to `dims=1:N`; The maximal value of `N` will be the minimum of `N` and the number of columns - 1 for each sample.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/runumap",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "dims": {
                                            "changed": false,
                                            "default": 30,
                                            "desc": "The number of PCs to use",
                                            "type": "int",
                                            "value": 30
                                        },
                                        "reduction": {
                                            "changed": false,
                                            "default": "pca",
                                            "desc": "The reduction to use for UMAP",
                                            "value": "pca"
                                        }
                                    }
                                },
                                "SCTransform": {
                                    "default": {},
                                    "desc": "Arguments for [`SCTransform()`](https://satijalab.org/seurat/reference/sctransform).<br />\n`object` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/sctransform",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        }
                                    }
                                },
                                "ScaleData": {
                                    "default": {
                                        "verbose": false
                                    },
                                    "desc": "Arguments for [`ScaleData()`](https://satijalab.org/seurat/reference/scaledata).<br />\n`object` and `features` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/scaledata",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "verbose": {
                                            "changed": false,
                                            "default": false,
                                            "desc": "Whether to print the progress",
                                            "flag": true,
                                            "type": "bool",
                                            "value": false
                                        }
                                    }
                                },
                                "SelectIntegrationFeatures": {
                                    "default": {
                                        "nfeatures": 3000
                                    },
                                    "desc": "Arguments for [`SelectIntegrationFeatures()`](https://satijalab.org/seurat/reference/selectintegrationfeatures).<br />\n`object.list` is specified internally, and `-` in the key will be replaced with `.`.",
                                    "ns": true,
                                    "type": "ns",
                                    "value": {
                                        "<more>": {
                                            "changed": false,
                                            "desc": "See https://satijalab.org/seurat/reference/selectintegrationfeatures",
                                            "order": 999,
                                            "value": [
                                                [
                                                    "",
                                                    ""
                                                ]
                                            ]
                                        },
                                        "nfeatures": {
                                            "changed": false,
                                            "default": 3000,
                                            "desc": "The number of features to select",
                                            "type": "int",
                                            "value": 3000
                                        }
                                    }
                                },
                                "ncores": {
                                    "changed": false,
                                    "default": 1,
                                    "desc": "Number of cores to use.<br />\nUsed in `future::plan(strategy = \"multicore\", workers = <ncores>)` to parallelize some Seurat procedures.",
                                    "value": 1
                                },
                                "use_sct": {
                                    "changed": false,
                                    "default": false,
                                    "desc": "Whether use SCTransform routine or not If `True`, following procedures will be performed in the order:<br />\n* [`SplitObject`](https://satijalab.org/seurat/reference/splitobject).<br />\n* [`SCTransform*`](https://satijalab.org/seurat/reference/sctransform).<br />\n* [`SelectIntegrationFeatures`](https://satijalab.org/seurat/reference/selectintegrationfeatures).<br />\n* [`PrepSCTIntegration`](https://satijalab.org/seurat/reference/prepsctintegration).<br />\n* [`RunPCA*`](https://satijalab.org/seurat/reference/runpca).<br />\n* [`FindIntegrationAnchors`](https://satijalab.org/seurat/reference/findintegrationanchors).<br />\n* [`IntegrateData`](https://satijalab.org/seurat/reference/integratedata).<br />\n* [`RunPCA`](https://satijalab.org/seurat/reference/runpca).<br />\n* [`RunUMAP`](https://satijalab.org/seurat/reference/runumap).<br />\n* [`FindNeighbors`](https://satijalab.org/seurat/reference/findneighbors).<br />\n* [`FindClusters`](https://satijalab.org/seurat/reference/findclusters).<br />\n* `*`: On each sample See https://satijalab.org/seurat/articles/integration_rpca.html#performing-integration-on-datasets-normalized-with-sctransform-1.<br />\nIf `False`, fast integration will be performed, using reciprocal PCA (RPCA) and following procedures will be performed in the order:<br />\n* [`SplitObject`](https://satijalab.org/seurat/reference/splitobject).<br />\n* [`NormalizeData*`](https://satijalab.org/seurat/reference/normalizedata).<br />\n* [`FindVariableFeatures*`](https://satijalab.org/seurat/reference/findvariablefeatures).<br />\n* [`SelectIntegrationFeatures`](https://satijalab.org/seurat/reference/selectintegrationfeatures).<br />\n* [`ScaleData*`](https://satijalab.org/seurat/reference/scaledata).<br />\n* [`RunPCA*`](https://satijalab.org/seurat/reference/runpca).<br />\n* [`FindIntegrationAnchors`](https://satijalab.org/seurat/reference/findintegrationanchors).<br />\n* [`IntegrateData`](https://satijalab.org/seurat/reference/integratedata).<br />\n* [`ScaleData`](https://satijalab.org/seurat/reference/scaledata).<br />\n* [`RunPCA`](https://satijalab.org/seurat/reference/runpca).<br />\n* [`RunUMAP`](https://satijalab.org/seurat/reference/runumap).<br />\n* [`FindNeighbors`](https://satijalab.org/seurat/reference/findneighbors).<br />\n* [`FindClusters`](https://satijalab.org/seurat/reference/findclusters).<br />\n* `*`: On each sample.<br />\nSee https://satijalab.org/seurat/articles/integration_rpca.html.",
                                    "flag": true,
                                    "order": "-99",
                                    "type": "bool",
                                    "value": false
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                },
                "ScrnaBasicUnsupervisedStats": {
                    "desc": "# Statistics of the supervised clustering.\n\nIncluding the number/fraction of cells in each cluster,\nthe gene expression values and dimension reduction plots.",
                    "is_start": false,
                    "order": 8,
                    "value": {
                        "cache": {
                            "default": null,
                            "desc": "# Job caching\n\nIf cache set to False (detected in the sequence of configuration files,\nPipen constructor, and process definition), the job is running anyway\nregardless of previous runs.\n\nIf a previous run of a job fails, the job will be running anyway.\n\nIf a job is done successfully, a signature file will be generated for\nthe job. When we try to run the job again, the signature will be used\nto check if we can skip running the job again but to use the results\ngenerated by previous run.\n\nWe can also do a force-cache for a job by setting cache to \"force\".\nThis make sure of the results of previous successful run regardless of\ninput or script changes. This is useful for the cases that, for example,\nyou make some changes to input/script, but you don't want them to take\neffect immediately, especially when the job takes long time to run.\n",
                            "hidden": true,
                            "placeholder": "true",
                            "type": "auto",
                            "value": null
                        },
                        "dirsig": {
                            "default": null,
                            "desc": "How deep we should go to check directory signature",
                            "hidden": true,
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "envs": {
                            "default": {
                                "dimplots": {
                                    "Ident": {
                                        "devpars": {
                                            "height": 1000,
                                            "res": 100,
                                            "width": 1000
                                        },
                                        "group-by": "ident"
                                    }
                                },
                                "exprs": {},
                                "stats": {
                                    "fracCells_Sample": {
                                        "by": "Sample"
                                    },
                                    "ncells_All": {},
                                    "ncells_Sample": {
                                        "by": "Sample"
                                    }
                                }
                            },
                            "desc": "Environment variables for the process, used across jobs",
                            "value": {
                                "dimplots": {
                                    "changed": false,
                                    "default": {
                                        "Ident": {
                                            "devpars": {
                                                "height": 1000,
                                                "res": 100,
                                                "width": 1000
                                            },
                                            "group-by": "ident"
                                        }
                                    },
                                    "desc": "The dimensional reduction plots.<br />\n* `<case>` - The case to plot.<br />\nKeys are the arguments for `Seurat::Dimplot()`, plus `devpars` for the plots. `devpars` is a dictionary with keys `res`, `height` and `width` to specify the resolution, height and width of the plot. The hyphen (`-`) in the keys will be replaced by `.`.",
                                    "type": "json",
                                    "value": {
                                        "Ident": {
                                            "devpars": {
                                                "height": 1000,
                                                "res": 100,
                                                "width": 1000
                                            },
                                            "group-by": "ident"
                                        }
                                    }
                                },
                                "exprs": {
                                    "changed": false,
                                    "default": {},
                                    "desc": "The expression values to plot.<br />\n* `genes` - The set of genes for the plots, unless `features` for those plots is specified. Could also specify a file with genes (one per line).<br />\n* `ridgeplots` - The ridge plots for the gene expressions.<br />\nSee [`Seurat::RidgePlot`](https://satijalab.org/seurat/reference/ridgeplot).<br />\n* `vlnplots` - Violin plots for the gene expressions.<br />\nSee [`Seurat::VlnPlot`](https://satijalab.org/seurat/reference/vlnplot).<br />\nYou can have `boxplot` key to add `geom_boxplot()` to the violin plots.<br />\n* `featureplots` - The feature plots for the gene expressions.<br />\nSee [`Seurat::FeaturePlot`](https://satijalab.org/seurat/reference/featureplot).<br />\n* `dotplot` - Dot plots for the gene expressions.<br />\nSee [`Seurat::DotPlot`](https://satijalab.org/seurat/reference/dotplot).<br />\n* `heatmap` - Heatmap for the gene expressions.<br />\nSee [`Seurat::DoHeatmap`](https://satijalab.org/seurat/reference/doheatmap).<br />\nYou can specify `average=True` to plot on the average of the expressions.<br />\n* `table` - The table for the gene expressions.<br />\n(supported keys: title, log2, subset and features).<br />\n* All the above can have `devpars` to define the output figures and `plus` to add elements to the `ggplot` object.<br />\nYou can also have `subset` to subset the data.<br />\nMultiple cases can be distinguished by `ridgeplots` and `ridgeplots_1`.<br />\nIf no `features` specified, will use `genes`. If you want to use the default gene list `VariantFeatures(srtobj)[1:20]`, specify `features = \"default\"`. Or you can also specify the genes directly to `features`.",
                                    "type": "json",
                                    "value": {}
                                },
                                "stats": {
                                    "changed": false,
                                    "default": {
                                        "fracCells_Sample": {
                                            "by": "Sample"
                                        },
                                        "ncells_All": {},
                                        "ncells_Sample": {
                                            "by": "Sample"
                                        }
                                    },
                                    "desc": "The number/fraction of cells to plot.<br />\n* `nCells_*` - Number of cells for each cluster.<br />\nYou can specify `by` to group the cells by a metadata column, and `devpars` to specify the device parameters for the plot.<br />\nYou can also specify `filter` to filter the cells under certain conditions using metadata columns.<br />\n* `fracCells_*` - Fraction of cells for each cluster.<br />\nSimilar to `nCells_*`, but the fraction is calculated instead of the absolute number.",
                                    "type": "json",
                                    "value": {
                                        "fracCells_Sample": {
                                            "by": "Sample"
                                        },
                                        "ncells_All": {},
                                        "ncells_Sample": {
                                            "by": "Sample"
                                        }
                                    }
                                }
                            }
                        },
                        "error_strategy": {
                            "choices": [
                                "ignore",
                                "retry",
                                "halk"
                            ],
                            "choices_desc": [
                                "Ignore the error and continue to run next jobs",
                                "Retry the job",
                                "Halt the pipeline"
                            ],
                            "default": "ignore",
                            "desc": "What to do when a job fails",
                            "hidden": true,
                            "type": "choice",
                            "value": "ignore"
                        },
                        "forks": {
                            "changed": false,
                            "default": null,
                            "desc": "Number of jobs to run in parallel for each process\n\nThe ability to run multiple jobs in parallel is provided by the the scheduler\nsystem. For example, if you use the local scheduler, the jobs will be run in\nparallel using the `multiprocessing` module. If you use the `sge` scheduler,\nthe jobs will be submitted to the slurm scheduler and run in parallel.\n",
                            "placeholder": "1",
                            "type": "int",
                            "value": null
                        },
                        "lang": {
                            "default": null,
                            "desc": "The interpreter to run the script",
                            "hidden": true,
                            "placeholder": "Rscript",
                            "value": null
                        },
                        "num_retries": {
                            "default": null,
                            "desc": "Number of retries when a job fails. ",
                            "hidden": true,
                            "placeholder": "3",
                            "type": "int",
                            "value": null
                        },
                        "plugin_opts": {
                            "default": {},
                            "desc": "The plugin options of your pipeline",
                            "value": {
                                "<plugin_name>_<plugin_opt_name>": {
                                    "changed": false,
                                    "desc": "The value of plugin option `<plugin_name>_<plugin_opt_name>`",
                                    "order": 999,
                                    "type": "str",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        },
                        "scheduler": {
                            "default": null,
                            "desc": "The scheduler to use",
                            "hidden": true,
                            "placeholder": "local",
                            "value": null
                        },
                        "scheduler_opts": {
                            "default": {},
                            "desc": "The scheduler options",
                            "value": {
                                "<option_name>": {
                                    "changed": false,
                                    "desc": "The value of the option",
                                    "order": 999,
                                    "type": "auto",
                                    "value": [
                                        [
                                            "",
                                            ""
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "desc": "# Basic analysis for single cell RNA-seq data\n\nIncluding QC, clustering, marker genes, and enrichment analysis."
        }
    },
    "RUNNING_OPTIONS": {
        "DOCKER": {
            "allow_run": false,
            "command": "docker run -p 18521:18521 --rm -w /workdir -v .:/workdir biopipen/scrna-basic:${tag} pipen run scrna_basic ScrnaBasic @${configfile}",
            "configfile": "configfile",
            "desc": "Compose a command to the pipeline using docker.\n\nNote that if pipen-board (the web interface) is running via docker, you should choose LOCAL instead, if you want to run the pipeline in the same container.\n\nOtherwise, you can copy the command and run it in the terminal.\n",
            "editable": true,
            "value": {
                "configfile": {
                    "changed": false,
                    "desc": "The configuration file for the pipeline, typically generated by this wizard\n",
                    "placeholder": "Example.config.toml",
                    "required": true,
                    "value": "Example.config.toml"
                },
                "tag": {
                    "changed": true,
                    "desc": "The tag of the docker image on dockerhub.\nYou can find the available tags at https://hub.docker.com/r/biopipen/scrna-basic/tags",
                    "placeholder": "dev",
                    "required": true,
                    "value": "dev"
                }
            }
        },
        "LOCAL": {
            "allow_run": true,
            "command": "pipen run scrna_basic ScrnaBasic @${configfile}",
            "configfile": "configfile",
            "desc": "Compose a command to run the pipeline locally",
            "editable": true,
            "order": -1,
            "value": {
                "configfile": {
                    "changed": false,
                    "desc": "The configuration file for the pipeline, typically generated by this wizard\n",
                    "placeholder": "Example.config.toml",
                    "required": true,
                    "value": "Example.config.toml"
                }
            }
        },
        "SINGULARITY": {
            "allow_run": false,
            "command": "singularity run --pwd /workdir -B .:/workdir -c -e -w docker://biopipen/scrna-basic:${tag} pipen run scrna_basic ScrnaBasic @${configfile}",
            "configfile": "configfile",
            "desc": "Compose a command to the pipeline using singularity.\n\nNote that if pipen-board (the web interface) is running via singularity, you should choose LOCAL instead, if you want to run the pipeline in the same container.\n\nOtherwise, you can copy the command and run it in the terminal.\n",
            "editable": true,
            "order": 9,
            "value": {
                "configfile": {
                    "changed": false,
                    "desc": "The configuration file for the pipeline, typically generated by this wizard\n",
                    "placeholder": "Example.config.toml",
                    "required": true,
                    "value": "Example.config.toml"
                },
                "tag": {
                    "changed": false,
                    "desc": "The tag of the docker image on dockerhub.\nYou can find the available tags at https://hub.docker.com/r/biopipen/scrna-basic/tags",
                    "placeholder": "dev",
                    "required": true,
                    "value": "dev"
                }
            }
        }
    }
}